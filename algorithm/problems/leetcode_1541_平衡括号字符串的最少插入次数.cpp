#include "common.hpp"

// 给你一个括号字符串 s ，它只包含字符 '(' 和 ')' 。一个括号字符串被称为平衡的当它满足：
//
// 任何左括号 '(' 必须对应两个连续的右括号 '))' 。
// 左括号 '(' 必须在对应的连续两个右括号 '))' 之前。

int solution(const std::string& s) {
  int ans = 0, left = 0, n = s.size();
  for (int i = 0; i < n; ++i) {
    // 统计左括号 '(' 的出现次数
    if (s[i] == '(') {
      ++left;
    }
    // 此时出现了右括号 ')'，为了保证符合平衡规则 '())'，在 ')' 左右两边右两种情况
    //  o 在「之后」不存在右括号 ')'，此时意味着需要添加 1 个
    //  o 在「之前」不存在左括号 '(' ，此时意味着需要添加 1 个
    // 如果说完全符合平衡规则，则需要抵消掉之前统计的一个左括号次数，因为左括号次数在
    // 循环结束后需要用来统计还剩下多少个右括号需要补充。
    else {
      // 在当前括号「之后」还是右括号，满足 '())' 平衡规则的 '))' 部分。
      if (i + 1 < n && s[i + 1] == ')') {
        ++i;
      // 否则，不满足 '())' 平衡规则的 '))' 部分，我们需要手动加上最后一个 ')' 的插入次数。
      } else {
        ++ans;
      }

      // 之前有一个左括号，意味着完全满足 '())' 平衡规则，或者是 '()' 部分。
      if (left > 0) {
        --left;
      }
      // 之前没有左括号，我们需要手动添加一个左括号 '(' 的插入次数。
      else {
        ++ans;
      }
    }
  }

  ans += left * 2;
  return ans;
}
