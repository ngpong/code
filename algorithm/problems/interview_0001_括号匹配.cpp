#include "common.hpp"

// 题目: 给定一个字符串 s 仅包含字符 '[' 和 ']'，要求输出该字符串完整的括号匹配
// 例如: "]][][" -> "[[]][][]"
//
// 我们设定一个累加量，该累加量标示着 [] 的稳定性
// 什么是稳定性？假设出现了一个 '[' 我们就让累加量 +1，假设下一个出现了一个 ']' 我们就让累加量 -1，也就意味着
// 字符串 "[]" 是一个稳定的状态
//
// 那么在不稳定的情况下，假设累加量变成 -1，那么就意味着 ']' 多出了一个，那么相应的我们就需要想办法在字符串左
// 变补齐一个 '['，反之，累加量不等于 0 的情况下，表示拥有富裕的 '['，那么我们就要在结束后，在字符串的右边补齐
// ']'

std::string solution(const std::string& str) {
  std::string l = "";
  std::string r = "";

  int32_t cnt = 0;
  for (auto c : str) {
    switch (c) {
      // 匹配到 '[' 的情况，那么累加量要 +1，相应的，在结束循环后，字符串的右边根据该累加量的总和来补齐 ']'
      case '[': cnt++; break;
      // 匹配到 ']' 的情况，那么累加量要 -1，相应的字符串左边要补齐一个 '['
      case ']': cnt--; break;
    }

    // 出现了 ']' 不平衡的情况
    if (cnt < 0) {
      l += "[";
      cnt++;
    }
  }

  for (int32_t i = 0; i < cnt; ++i) {
    r += "]";
  }

  return l + str + r;
}
